openapi: 3.0.3
info:
  title: User Service API
  description: API для управления пользователями
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local server

tags:
  - name: Users
    description: Операции с пользователями

paths:
  /api/v1/users:
    get:
      tags:
        - Users
      summary: Получить список пользователей
      operationId: getUsers
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPageResponse'

    post:
      tags:
        - Users
      summary: Создать нового пользователя
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Невалидные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/userfeed/{userId}:
    get:
      tags:
        - Users
      summary: Получить пользователя по ID
      operationId: getUserFeedById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFeedResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{userId}:
    get:
      tags:
        - Users
      summary: Получить пользователя по ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Обновить пользователя
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Пользователь обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    delete:
      tags:
        - Users
      summary: Удалить пользователя
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Пользователь удален

components:
  schemas:
    CreateUserRequest:
      type: object
      required:
        - email
        - nickName
        - firstName
        - secondName
        - birthday
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        nickName:
          type: string
          minLength: 3
          maxLength: 50
          example: johndoe
        firstName:
          type: string
          maxLength: 100
          example: John
        secondName:
          type: string
          maxLength: 100
          example: Doe
        middleName:
          type: string
          maxLength: 100
          example: Winston
        aboutSelf:
          type: string
          maxLength: 1000
          example: Java Dev
        birthday:
          type: string
          format: date


    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
          minLength: 3
          maxLength: 50
        firstName:
          type: string
          maxLength: 100
        lastName:
          type: string
          maxLength: 100
        createdAt:
          type: string
          format: date

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@example.com
        nickName:
          type: string
          example: johndoe
        firstName:
          type: string
          example: John
        secondName:
          type: string
          example: Doe
        middleName:
          type: string
          example: Winston
        birthday:
          type: string
          format: date
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date

    UserFeedResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@example.com
        nickName:
          type: string
          example: johndoe
        firstName:
          type: string
          example: John
        secondName:
          type: string
          example: Doe
        middleName:
          type: string
          example: Winston


    UserPageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
        timestamp:
          type: string
          format: date

    CourseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        title:
          type: string
          example: Python c 0
        description:
          type: string
          example: Курс по Python c 0 до опытного разработчика
  
